{"version":3,"sources":["../src/parseBookmarks.js"],"names":["parseBookmarks","html","options","DOMParser","getNodeAttributeString","node","name","i","attributes","length","attr","toLowerCase","value","undefined","getNodeAttributeInt","s","parseInt","processFolderNode","dlNode","items","folderItem","firstChild","nextSibling","nodeType","tagName","push","title","textContent","type","added","lastModified","children","url","icon","flattenItems","path","newItems","forEach","item","concat","doc","parseFromString","dlNodes","getElementsByTagName","flatten"],"mappings":"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","sourcesContent":["export function parseBookmarks(html, options = {}) {\n  if (!options.DOMParser) {\n    // Only works in a browser\n    options.DOMParser = DOMParser\n  }\n\n  const getNodeAttributeString = (node, name) => {\n    for (let i = 0; i < node.attributes.length; i++) {\n      const attr = node.attributes[i]\n\n      if (attr.name.toLowerCase() === name) {\n        return attr.value\n      }\n    }\n\n    return undefined\n  }\n  const getNodeAttributeInt = (node, name) => {\n    const s = getNodeAttributeString(node, name)\n\n    if (s) {\n      return parseInt(s)\n    }\n\n    return undefined\n  }\n\n  const processFolderNode = (dlNode) => {\n    let items = []\n    let folderItem = null\n\n    for (let node = dlNode.firstChild; node; node = node.nextSibling) {\n      if (node.nodeType !== 1) {\n        // Ignore everything but element nodes\n        continue\n      }\n\n      switch (node.tagName.toLowerCase()) {\n        default:\n        case \"p\":\n        case \"dt\":\n          break\n        case \"h3\":\n          if (folderItem) {\n            // There was an h3 with no dl after it\n            items.push(folderItem)\n          }\n          folderItem = {\n            title: node.firstChild?.textContent,\n            type: \"folder\",\n            added: getNodeAttributeInt(node, \"add_date\"),\n            lastModified: getNodeAttributeInt(node, \"last_modified\"),\n          }\n          break\n        case \"dl\":\n          if (!folderItem) {\n            // No h3 seen, so ignore it\n            continue\n          }\n          folderItem.children = processFolderNode(node)\n          items.push(folderItem)\n          folderItem = null\n          break\n        case \"a\":\n          items.push({\n            title: node.firstChild?.textContent,\n            type: \"bookmark\",\n            url: getNodeAttributeString(node, \"href\"),\n            added: parseInt(getNodeAttributeInt(node, \"add_date\")),\n            icon: getNodeAttributeString(node, \"icon\"),\n          })\n          break\n      }\n    }\n\n    return items\n  }\n\n  const flattenItems = (items, path) => {\n    let newItems = []\n\n    items.forEach((item) => {\n      if (item.type === \"folder\") {\n        newItems = newItems.concat(\n          flattenItems(item.children, path + item.title + \"/\")\n        )\n      } else {\n        newItems.push({\n          title: item.title,\n          url: item.url,\n          path,\n          added: item.added,\n          icon: item.icon,\n        })\n      }\n    })\n\n    return newItems\n  }\n\n  const doc = new options.DOMParser(html).parseFromString(html, \"text/html\")\n  const dlNodes = doc.getElementsByTagName(\"DL\")\n\n  let items = processFolderNode(dlNodes[0])\n\n  if (options.flatten) {\n    items = flattenItems(items, \"/\")\n  }\n\n  // DEBUG: Leave for debugging\n  // console.log(JSON.stringify(items, null, \"  \"))\n\n  return items\n}\n"],"file":"parseBookmarks.js"}